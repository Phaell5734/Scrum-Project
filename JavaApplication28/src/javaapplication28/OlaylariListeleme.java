
package javaapplication28;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.table.*;
import java.sql.*;
import java.time.*;
import java.time.format.*;
import java.util.TimerTask;

public class OlaylariListeleme extends javax.swing.JFrame {
Connection con;
private JFrame frame;
    private Hatirlatma hatirlatma;

    /**
     * Creates new form NewJFrame
     */
    public OlaylariListeleme() {
        initComponents();
    }
    public class Hatirlatma {
        private LocalDateTime olayZamani;

        public Hatirlatma(LocalDateTime olayZamani) {
            this.olayZamani = olayZamani;
        }

        public void kontrolEt() {
            LocalDateTime suankiZaman = LocalDateTime.now();
            LocalDateTime hatirlatmaZamani = olayZamani.minusHours(1);

            if (suankiZaman.isEqual(hatirlatmaZamani)) {
                JOptionPane.showMessageDialog(frame, "Olaya 1 saat kaldı!");
            }
        }
    }
 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Olay Menüsü");

        jButton1.setText("Geri Dön");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Olaylari Listele ve Olaylarda islem yap");
        jButton2.setActionCommand("Olaylari Listeleme ve\n Olaylarda İslem Yapma");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Geri dön butonu
        this.setVisible(false);
        new Takviminterface().setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    // Yeni pencere oluşturma
    JFrame frame = new JFrame("Olaylar");
    frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

    // Veritabanına bağlanma
    try {
        con = DriverManager.getConnection("jdbc:mysql://localhost:3306/world", "root", "root");
        Statement stmt = con.createStatement();
        ResultSet rs = stmt.executeQuery("SELECT * FROM untitled");

        // Tablo modeli oluşturma
        DefaultTableModel tableModel = new DefaultTableModel();
        tableModel.addColumn("Tarih");
        tableModel.addColumn("Başlangıç Saati");
        tableModel.addColumn("Bitiş Saati");
        tableModel.addColumn("Olayın Tipi");
        tableModel.addColumn("Olay Açıklama");

        // Veritabanından alınan verileri tabloya ekleme
        while (rs.next()) {
            Object[] row = new Object[5];
            row[0] = rs.getDate("Tarih");
            row[1] = rs.getString("Saat_BASLANGIC");
            row[2] = rs.getString("Saat_BITIS");
            row[3] = rs.getString("Olay_OLAYINTIPI");
            row[4] = rs.getString("Olay_OLAYACIKLAMA");
            tableModel.addRow(row);

                // Olayın gerçekleşme zamanını LocalDateTime nesnesine dönüştürme
                LocalDateTime olayZamani = LocalDateTime.parse(row[0]+ " " + row[1], DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));

                // Hatırlatma nesnesini oluşturma
                hatirlatma = new Hatirlatma(olayZamani);
        }
        

        // Tablo oluşturma ve ekleme
        JTable table = new JTable(tableModel);
        JScrollPane scrollPane = new JScrollPane(table);
        frame.getContentPane().add(scrollPane);

        // Silme işlemi için buton ekleme
        JButton deleteButton = new JButton("Seçili Satırı Sil");
        deleteButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int selectedRowIndex = table.getSelectedRow();
                if (selectedRowIndex != -1) {
                    // Seçili satırın bilgilerini alma
                    String selectedDate = table.getValueAt(selectedRowIndex, 0).toString();
                    String saatBaslangic = table.getValueAt(selectedRowIndex, 1).toString();
                    String saatBitis = table.getValueAt(selectedRowIndex, 2).toString();
                    String olayIntipi = table.getValueAt(selectedRowIndex, 3).toString();
                    String olayAciklama = table.getValueAt(selectedRowIndex, 4).toString();

                    // Alınan bilgiler ile silme işlemini gerçekleştirme
                    try {
                        String deleteQuery = "DELETE FROM untitled WHERE Tarih = ? AND Saat_BASLANGIC = ? AND Saat_BITIS = ? AND Olay_OLAYINTIPI = ? AND Olay_OLAYACIKLAMA = ?";
                        PreparedStatement pstmt = con.prepareStatement(deleteQuery);
                        pstmt.setString(1, selectedDate);
                        pstmt.setString(2, saatBaslangic);
                        pstmt.setString(3, saatBitis);
                        pstmt.setString(4, olayIntipi);
                        pstmt.setString(5, olayAciklama);

                        int rowsAffected = pstmt.executeUpdate();
                        if (rowsAffected > 0) {
                            JOptionPane.showInputDialog(frame, "Silme islemi basarili!");
                            // Başarı mesajı
                        } else {
                            JOptionPane.showInputDialog(frame, "Silme islemi basarisiz!");
                            // Başarısız mesajı
                        }

                        pstmt.close();
                    } catch (SQLException ex) {
                        ex.printStackTrace();
                    }

                    // Tablodan seçili satırı kaldırma
                    tableModel.removeRow(selectedRowIndex);
                }
            }
        });

        // Güncelleme işlemi için buton ekleme
        JButton updateButton = new JButton("Seçili Satırı Güncelle");
        updateButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int selectedRowIndex = table.getSelectedRow();
                if (selectedRowIndex != -1) {
                    // Seçili satırın verilerini al
                    String selectedDate = table.getValueAt(selectedRowIndex, 0).toString();
                    String saatBaslangic = table.getValueAt(selectedRowIndex, 1).toString();
                    String saatBitis = table.getValueAt(selectedRowIndex, 2).toString();
                    String olayIntipi = table.getValueAt(selectedRowIndex, 3).toString();
                    String olayAciklama = table.getValueAt(selectedRowIndex, 4).toString();

                    // Güncelleme işlemini gerçekleştirme için bilgiler yazma kısmı
                    String yeniTarih = JOptionPane.showInputDialog(frame, "Yeni Tarih:");
                    String yeniSaatBaslangic = JOptionPane.showInputDialog(frame, "Yeni Başlangıç Saati:");
                    String yeniSaatBitis = JOptionPane.showInputDialog(frame, "Yeni Bitiş Saati:");
                    String yeniOlayIntipi = JOptionPane.showInputDialog(frame, "Yeni Olay İntipi:");
                    String yeniOlayAciklama = JOptionPane.showInputDialog(frame, "Yeni Olay Açıklama:");

                    try {
                        // Veritabanını güncelleme
                        String updateQuery = "UPDATE untitled SET Tarih = ?, Saat_BASLANGIC = ?, Saat_BITIS = ?, Olay_OLAYINTIPI = ?, Olay_OLAYACIKLAMA = ? WHERE Tarih = ? AND Saat_BASLANGIC = ? AND Saat_BITIS = ? AND Olay_OLAYINTIPI = ? AND Olay_OLAYACIKLAMA = ?";
                        PreparedStatement pstmt = con.prepareStatement(updateQuery);
                        pstmt.setString(1, yeniTarih);
                        pstmt.setString(2, yeniSaatBaslangic);
                        pstmt.setString(3, yeniSaatBitis);
                        pstmt.setString(4, yeniOlayIntipi);
                        pstmt.setString(5, yeniOlayAciklama);
                        pstmt.setString(6, selectedDate);
                        pstmt.setString(7, saatBaslangic);
                        pstmt.setString(8, saatBitis);
                        pstmt.setString(9, olayIntipi);
                        pstmt.setString(10, olayAciklama);

                        int rowsAffected = pstmt.executeUpdate();
                        if (rowsAffected > 0) {
                            JOptionPane.showInputDialog(frame, "Değiştirme islemi basarili!");
                            // Başarı mesajı
                        } else {
                            JOptionPane.showInputDialog(frame, "Degistirme islemi basarisiz!");
                            // Başarısız mesajı 
                        }

                        pstmt.close();
                    } catch (SQLException ex) {
                        ex.printStackTrace();
                    }

                    // Seçili satırın tablodaki verilerini güncelleme
                    table.setValueAt(yeniTarih, selectedRowIndex, 0);
                    table.setValueAt(yeniSaatBaslangic, selectedRowIndex, 1);
                    table.setValueAt(yeniSaatBitis, selectedRowIndex, 2);
                    table.setValueAt(yeniOlayIntipi, selectedRowIndex, 3);
                    table.setValueAt(yeniOlayAciklama, selectedRowIndex, 4);
                }
            }
        });

        // Güncelleme ve silme butonlarını eklemek için panel oluşturma
        JPanel buttonPanel = new JPanel();
        buttonPanel.add(deleteButton);
        buttonPanel.add(updateButton);

        // Pencereye tabloyu ve butonları ekleme
        frame.getContentPane().add(scrollPane, BorderLayout.CENTER);
        frame.getContentPane().add(buttonPanel, BorderLayout.SOUTH);

        // Pencereyi gösterme
        frame.pack();
        frame.setVisible(true);

        rs.close();
        stmt.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }
    }//GEN-LAST:event_jButton2ActionPerformed


    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OlaylariListeleme.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OlaylariListeleme.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OlaylariListeleme.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OlaylariListeleme.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            
            @Override
            public void run() {
                try {
                    OlaylariListeleme window = new OlaylariListeleme();
                    window.frame.setVisible(true);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    // End of variables declaration//GEN-END:variables
}
